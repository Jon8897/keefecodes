# V1.0.0.4
name: KeefeCodes DevSecOps Pipeline

on:
  push:
    branches:
      - dev
      - main

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21.5.0'

      - name: Install dependencies
        run: npm ci

      - name: Lint (code quality check)
        run: npm run lint --if-present || true
      - name: Build project
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  security-scan:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate || true 

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Setup SSH
        run: |
          eval "$(ssh-agent -s)"
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          ssh-add /tmp/deploy_key || (echo "SSH key failed to load. Check formatting in GitHub Secrets." && exit 1)

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.REG_HOST }} >> ~/.ssh/known_hosts

      - name: Determine environment and deploy
        run: |
          BRANCH=${GITHUB_REF##*/}
          echo "Deploying branch: $BRANCH"

          if [ "$BRANCH" == "dev" ]; then
            TARGET_DIR="/home/${{ secrets.REG_FTP_USERNAME }}/public_html/keefecodes.com/dev"
          elif [ "$BRANCH" == "main" ]; then
            TARGET_DIR="/home/${{ secrets.REG_FTP_USERNAME }}/public_html/keefecodes.com/live"
          else
            echo "Not a deployment branch."
            exit 0
          fi

          echo "Deploying build files to $TARGET_DIR ..."
          scp -r dist/* ${{ secrets.REG_FTP_USERNAME }}@${{ secrets.REG_HOST }}:$TARGET_DIR || (echo "‚ùå Deployment failed. Check server permissions or SSH key." && exit 1)

  notify:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, deploy]
    if: always()

    steps:
      - name: Send detailed CI/CD status to Discord
        env:
          WEBHOOK_URL: ${{ secrets.KEEFECODES_DEVOPS_BOT }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          BRANCH: ${{ github.ref_name }}
          AUTHOR: ${{ github.event.head_commit.author.name }}
          COMMIT_MSG: ${{ github.event.head_commit.message }}
          COMMIT_HASH: ${{ github.sha }}
          BUILD_STATUS: ${{ needs.build-and-test.result }}
          SECURITY_STATUS: ${{ needs.security-scan.result }}
          DEPLOY_STATUS: ${{ needs.deploy.result }}
        run: |
          # --- Determine overall status ---
          if [[ "$DEPLOY_STATUS" == "success" && "$BUILD_STATUS" == "success" && "$SECURITY_STATUS" == "success" ]]; then
            COLOR=3066993
            STATUS_TEXT="‚úÖ Deployment Succeeded"
          else
            COLOR=15158332
            STATUS_TEXT="‚ùå Deployment Failed"
          fi

          # --- Compose a failure reason summary ---
          FAIL_REASON=""
          [[ "$BUILD_STATUS" != "success" ]] && FAIL_REASON="${FAIL_REASON}‚ùó Build step failed\n"
          [[ "$SECURITY_STATUS" != "success" ]] && FAIL_REASON="${FAIL_REASON}üß© Security audit issues detected\n"
          [[ "$DEPLOY_STATUS" != "success" ]] && FAIL_REASON="${FAIL_REASON}üö´ Deployment error\n"
          [[ -z "$FAIL_REASON" ]] && FAIL_REASON="‚úÖ All stages completed successfully"

          # --- Create GitHub run URL ---
          RUN_URL="https://github.com/$REPO/actions/runs/$RUN_ID"

          # --- Send to Discord ---
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "{
            \"username\": \"KeefeCodes CI/CD Bot\",
            \"embeds\": [{
              \"title\": \"$STATUS_TEXT\",
              \"color\": $COLOR,
              \"fields\": [
                {\"name\": \"Repository\", \"value\": \"$REPO\", \"inline\": true},
                {\"name\": \"Branch\", \"value\": \"$BRANCH\", \"inline\": true},
                {\"name\": \"Author\", \"value\": \"$AUTHOR\", \"inline\": true},
                {\"name\": \"Commit Message\", \"value\": \"$COMMIT_MSG\"},
                {\"name\": \"Commit Hash\", \"value\": \"[\`${COMMIT_HASH:0:7}\`]($RUN_URL)\"},
                {\"name\": \"Build Status\", \"value\": \"$BUILD_STATUS\", \"inline\": true},
                {\"name\": \"Security Scan\", \"value\": \"$SECURITY_STATUS\", \"inline\": true},
                {\"name\": \"Deployment\", \"value\": \"$DEPLOY_STATUS\", \"inline\": true},
                {\"name\": \"Summary\", \"value\": \"$FAIL_REASON\"}
              ],
              \"footer\": {\"text\": \"KeefeCodes DevSecOps Pipeline ‚Ä¢ $(date)\"}
            }]
          }" $WEBHOOK_URL